"""Initial schema

Revision ID: 5b74817834d0
Revises:
Create Date: 2025-09-12 05:55:49.498155

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "5b74817834d0"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "patient",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column("anon_name", sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
        sa.Column("auto_id", sa.Integer(), autoincrement=True, nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("anon_name"),
        sa.UniqueConstraint("auto_id"),
    )
    op.create_table(
        "user",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("isactive", sa.Boolean(), nullable=False),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "userrole",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("name"),
    )
    op.create_table(
        "httpsession",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "study",
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("study_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("patient_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("anon_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(
            ["patient_id"],
            ["patient.id"],
        ),
        sa.PrimaryKeyConstraint("study_uid"),
    )
    op.create_table(
        "taskdesign",
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("label", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("slicer_script", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("slicer_result_validator", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
        sa.Column("slicer_script_args", sa.JSON(), nullable=True),
        sa.Column("slicer_result_validator_args", sa.JSON(), nullable=True),
        sa.Column("role_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("max_users", sa.Integer(), nullable=True),
        sa.Column("min_users", sa.Integer(), nullable=True),
        sa.Column(
            "level", sa.Enum("SERIES", "STUDY", "PATIENT", name="dicomquerylevel"), nullable=False
        ),
        sa.Column("result_schema", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_name"],
            ["userrole.name"],
        ),
        sa.PrimaryKeyConstraint("name"),
    )
    op.create_table(
        "userroleslink",
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("role_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_name"],
            ["userrole.name"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "role_name"),
    )
    op.create_table(
        "series",
        sa.Column("series_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("anon_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("series_description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("series_number", sa.Integer(), nullable=False),
        sa.Column("study_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["study_uid"],
            ["study.study_uid"],
        ),
        sa.PrimaryKeyConstraint("series_uid"),
    )
    op.create_table(
        "task",
        sa.Column("info", sqlmodel.sql.sqltypes.AutoString(length=3000), nullable=True),
        sa.Column(
            "status",
            sa.Enum("pending", "inwork", "finished", "failed", "pause", name="taskstatus"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("patient_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("study_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("series_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("task_design_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("study_anon_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("series_anon_uid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("clarinet_storage_path", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("result", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column(
            "changed_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=True,
        ),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("finished_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["patient_id"],
            ["patient.id"],
        ),
        sa.ForeignKeyConstraint(
            ["series_uid"],
            ["series.series_uid"],
        ),
        sa.ForeignKeyConstraint(
            ["study_uid"],
            ["study.study_uid"],
        ),
        sa.ForeignKeyConstraint(
            ["task_design_id"],
            ["taskdesign.name"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("task")
    op.drop_table("series")
    op.drop_table("userroleslink")
    op.drop_table("taskdesign")
    op.drop_table("study")
    op.drop_table("httpsession")
    op.drop_table("userrole")
    op.drop_table("user")
    op.drop_table("patient")
    # ### end Alembic commands ###
